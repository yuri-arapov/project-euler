;; 26 March 2008
;; 
;; Yuri Arapov <yuridichesky@gmail.com>
;; 
;; Project Euler
;; 
;; http://projecteuler.net/index.php?section=problems&id=45
;;
;; Problem 45
;;
;; 06 June 2003
;; 
;; Triangle, pentagonal, and hexagonal numbers are generated by the following
;; formulae:
;; Triangle                Tn=n(n+1)/2             1, 3, 6, 10, 15, ...
;; Pentagonal              Pn=n(3n−1)/2            1, 5, 12, 22, 35, ...
;; Hexagonal               Hn=n(2n−1)              1, 6, 15, 28, 45, ...
;; 
;; It can be verified that T285 = P165 = H143 = 40755.
;; 
;; Find the next triangle number that is also pentagonal and hexagonal.
;;
;; Answer: 1533776805
;;
;;
;; NOTE: every hexagonal number is a triangle one as well
        

(load "print.scm")


(define (t n) (/ (* n (+ n 1)) 2))
(define (p n) (/ (* n (- (* 3 n) 1)) 2))
(define (h n) (* n (- (* 2 n) 1)))


(define (p45 limit)

  (define (make-number n proc) (list (proc n) n proc))

  (define (get-number nn) (car nn))
  (define (get-index  nn) (cadr nn))
  (define (get-proc   nn) (caddr nn))
  (define (next       nn) (make-number (+ 1 (get-index nn)) (get-proc nn)))

  (define (grow nn target)
    (if (>= (get-number nn) (get-number target))
      nn
      (grow (next nn) target)))
        
  (define (loop hh pp tt)
;;    (if (zero? (remainder (get-index hh) 10000))
;;      (println hh " " (get-index tt)))
    (if (> (get-index hh) limit)
      false
      (let* ((hh (next hh))
             (pp (grow pp hh))
             (tt (grow tt hh)))
        (if (and (= (get-number hh) (get-number pp))
                 (= (get-number hh) (get-number tt)))
          (list hh pp tt)
          (loop (next hh) pp tt)))))

  (loop (make-number 144 h) (make-number 165 p) (make-number 285 t)))
  ;;(loop (make-number 27694 h) (make-number 165 p) (make-number 285 t)))


;; end of file
