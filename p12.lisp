;; Project Euler
;;
;; http://projecteuler.net/index.php?section=problems&id=12
;;
;; Problem 12
;; 08 March 2002
;;
;; The sequence of triangle numbers is generated by adding the natural numbers.
;; So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
;; ten terms would be:
;;
;; 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
;;
;; Let us list the factors of the first seven triangle numbers:
;;
;;       1: 1
;;       3: 1,3
;;       6: 1,2,3,6
;;      10: 1,2,5,10
;;      15: 1,3,5,15
;;      21: 1,3,7,21
;;      28: 1,2,4,7,14,28
;;
;; We can see that the 7th triangle number, 28, is the first triangle number to
;; have over five divisors.
;;
;; Which is the first triangle number to have over five-hundred divisors?
;;
;; Answer: 76576500
;;


(defun dividerp (n d) (zerop (rem n d)))


;; Return list of factors of given n:
;;   (factorize (* 64 123)) -> (2 2 2 2 2 2 3 41)
;;
(defun factorize (n)
  (defun iter (n d res)
    (cond ((> (* d d) n)
           (reverse (if (< 1 n) (cons n res) res)))
          ((dividerp n d)
           (iter (/ n d) d (cons d res)))
          (t
            (iter n (if (= 2 d) 3 (+ 2 d)) res))))
  (iter n 2 '()))


;; Pack factorization: make list of factors and their powers:
;;   (pack-factorization (factorize (* 64 123))) -> ((2 . 6) (3 . 1) (41 . 1))
;;
(defun pack-factorization (s)
  (defun add (d pow res) (cons (cons d pow) res))
  (defun iter (d pow s res)
    (cond ((null s)
           (reverse (add d pow res)))
          ((= d (car s))
           (iter d (1+ pow) (cdr s) res))
          (t
            (iter (car s) 1 (cdr s) (add d pow res)))))
  (iter (car s) 1 (cdr s) '()))


;; Return number of divisors of given n.
;;
;; See:
;;   http://primes.utm.edu/glossary/page.php?sort=Tau
;;
;;            F
;;            _
;;   Let n = | | f ^ p    -- factorization of the n
;;            i   i   i
;;
;;   So number of divisors of the n is:
;;
;;        F
;;        _
;;   D = | | (p + 1)
;;        i    i
(defun number-of-divisors (n)
  (apply #'*
         (mapcar #'(lambda (x) (1+ (cdr x)))
                 (pack-factorization (factorize n)))))


;; Problem 12.
;;
(defun p12 ()
  (loop for nn = 2 then (1+ nn)
        for tt = 3 then (+ tt nn)
        when (< 500 (number-of-divisors tt)) return tt))


;; end of file
;; vim: ts=4 sw=4 et
