;; 2010-08-16
;; 
;; Yuri Arapov <yuridichesky@gmail.com>
;; 
;; Project Euler
;; 
;; http://projecteuler.net/index.php?section=problems&id=101
;;
;; Problem 101
;; 29 July 2005
;;
;; If we are presented with the first k terms of a sequence it is impossible to
;; say with certainty the value of the next term, as there are infinitely many
;; polynomial functions that can model the sequence.
;;
;; As an example, let us consider the sequence of cube numbers. This is defined
;; by the generating function,
;; u(n) = n^(3): 1, 8, 27, 64, 125, 216, ...
;;
;; Suppose we were only given the first two terms of this sequence. Working on
;; the principle that "simple is best" we should assume a linear relationship
;; and predict the next term to be 15 (common difference 7). Even if we were
;; presented with the first three terms, by the same principle of simplicity, a
;; quadratic relationship should be assumed.
;;
;; We shall define OP(k, n) to be the n^(th) term of the optimum polynomial
;; generating function for the first k terms of a sequence. It should be clear
;; that OP(k, n) will accurately generate the terms of the sequence for n ≤ k,
;; and potentially the first incorrect term (FIT) will be OP(k, k+1); in which
;; case we shall call it a bad OP (BOP).
;;
;; As a basis, if we were only given the first term of sequence, it would be
;; most sensible to assume constancy; that is, for n ≥ 2, OP(1, n) = u(1).
;;
;; Hence we obtain the following OPs for the cubic sequence:
;; OP(1, n) = 1                 1, *1*,   1,   1, ...
;; OP(2, n) = 7n−6              1,  8,  *15*, ...
;; OP(3, n) = 6n^(2)−11n+6      1,  8,   27,  *58*, ...
;; OP(4, n) = n^(3)             1,  8,   27,   64, 125, ...
;;
;; Clearly no BOPs exist for k ≥ 4.
;;
;; By considering the sum of FITs generated by the BOPs (indicated in **
;; above), we obtain 1 + 15 + 58 = 74.
;;
;; Consider the following tenth degree polynomial generating function:
;;
;; u(n) = 1 − n + n^(2) − n^(3) + n^(4) − n^(5) + n^(6) − n^(7) + n^(8) −
;;        n^(9) + n^(10)
;;
;; Find the sum of FITs for the BOPs.
;;
;; Answer: 37076114526
;;


(load "range.scm")
(load "linear-system.scm")


;; Compute value of the polynomial at the point x.
;; Factors is a list of polynomial factors starting with
;; degree 0.
;; Example:
;;   
;;   P:       1 + x + 3x^2 -7x^3
;;   factors: (1 1 3 -7)
;;
;;   P(3) -> (polynomial '(1 1 3 -7) 3) -> -158
;;
(define (polynomial factors x)
  (let loop ((xx  1)
             (f   factors)
             (res 0))
    (if (null? f)
      res
      (loop (* xx x) (cdr f) (+ res (* (car f) xx))))))


;; The u(n) function.
;;
(define (u n)
  (polynomial '(1 -1 1 -1 1 -1 1 -1 1 -1 1) n))


;; Compute FIT of approximation of length l (note, l is a _length_ of
;; approximation, not _degree_).
;;
(define (fit l)

  ;; Make i-th row (starting from 1) of linear system.
  ;;
  ;; For given l we have:
  ;;   u(1) = U1
  ;;   u(2) = U2
  ;;   ...
  ;;   u(l) = Ul
  ;;
  ;; The approximation we're looking for is:
  ;;       0       1       2             n
  ;;   a0 x  + a1 x  + a2 x  + ... + an x
  ;;
  ;; where n=l-1.
  ;;
  ;; So
  ;;       0       1       2             n
  ;;   a0 1  + a1 1  + a2 1  + ... + an 1  = U1
  ;;
  ;;       0       1       2             n
  ;;   a0 2  + a1 2  + a2 2  + ... + an 2  = U2
  ;;
  ;;   ...
  ;;
  ;;       0       1       2             n
  ;;   a0 l  + a1 l  + a2 l  + ... + an l  = Ul
  ;;
  ;; Our task is to determine a0,a1,...,an.
  ;;
  ;; The corresponding linear system matrix is
  ;;       |  0    1    2        n      |
  ;;       | 1    1    1   ...  1    U1 |   <-- row 1
  ;;       |                            |
  ;;       |  0    1    2        n      |
  ;;       | 2    2    2   ...  2    U2 |   <-- row 2
  ;;   m = |                            |
  ;;       | ...                        |
  ;;       |                            |
  ;;       |  0    1    2        n      |
  ;;       | l    l    l   ...  l    Ul |   <-- row l
  ;;
  ;; Solution of m will give list of (a0 a1 ... an).
  ;;
  (define (make-row i) 
    (append
      (map (lambda (d) (integer-expt i d)) (iota l))
      (list (u i))))

  (let* ((rows (map make-row (range 1 l)))
         (m    (apply append rows))
         (a    (linear-system m)))
    (polynomial a (1+ l)))) ;; (l+1)-th value of approximation is a FIT. 


;; Problem 101.
;;
(define (p101)
  (apply + (map fit (range 1 10))))
    

;; end of file
;; vim: ts=4 sw=4
