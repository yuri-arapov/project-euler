;; 03 March 2008
;; 
;; Yuri Arapov <yuridichesky@gmail.com>
;; 
;; Project Euler
;; 
;; http://projecteuler.net/index.php?section=problems&id=29
;;
;; Problem 29
;; 25 October 2002
;; 
;; Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
;; 
;;    2^2=4 , 2^3=8  , 2^4=16  , 2^5=32
;;    3^2=9 , 3^3=27 , 3^4=81  , 3^5=243
;;    4^2=16, 4^3=64 , 4^4=256 , 4^5=1024
;;    5^2=25, 5^3=125, 5^4=625 , 5^5=3125
;; 
;; If they are then placed in numerical order, with any repeats removed, we get
;; the following sequence of 15 distinct terms:
;; 
;; 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
;; 
;; How many distinct terms are in the sequence generated by ab for 2 <= a <= 100
;; and 2 <= b <= 100?
;;
;; Answer: ??? (see p29-2.scm)


(load "print.scm")


(define (not-eq? a b) (not (= a b)))


(define (divisor? d n) (zero? (remainder n d)))


(define (** a b)
  (let loop ((r 1)
             (b b))
    (if (= b 0)
      r
      (loop (* r a) (- b 1)))))


(define (all-true? ls)
  (if (null? ls)
    #t
    (if (not (car ls))
      #f
      (all-true? (cdr ls)))))


(define (lcd a . z)
  (let* ((ls (cons a z))
         (mm (apply min ls)))
    (let loop ((d 2))
      (if (> d mm)
        1
        (if (all-true? (map (lambda (x) (divisor? d x)) ls))
          d
          (loop (+ d 1)))))))
;;   (define ls (cons a z))
;; ;;  (println ls)
;;   (define mm (apply min ls))
;; ;;  (println mm)
;;   (define (loop d)
;;     (if (> d mm)
;;       1
;;       (if (all-true? (map (lambda (x) (divisor? d x)) ls))
;;         d
;;         (loop (+ d 1)))))
;;   (loop 2))


(define (primes->degrees primes)
  (do ((dlist '())
       (n 0)
       (f 0))
      ((null? primes) dlist)

      (set! n 1)
      (set! f (car primes))
      (set! primes (cdr primes))

      (do ()
          ((or (null? primes) (not-eq? f (car primes))) n)

          (set! n (+ n 1))
          (set! primes (cdr primes)))

      (set! dlist (append dlist (list n)))))


(define (factorize n)
  (define (loop ls d n)
    (if (= n 1)
      ls
      (if (divisor? d n)
        (loop (append ls (list d))    d    (/ n d))
        (loop         ls           (+ d 1)    n   ))))
  (loop '() 2 n))


(define (p29 amin amax bmin bmax)
  (define (distinct? a b)
    (if (eq? a amin) 
      #t
      (let* ((primes  (factorize a))
             (degrees (primes->degrees primes))
             (d       (apply lcd degrees)))
        (or (eq? d 1) (> (* b d) bmax)))))

  (do ((n 0)
       (a amin (+ a 1)))
      ((> a amax) n)

      (do ((b bmin (+ b 1)))
          ((> b bmax))

          (if (distinct? a b)
            (begin
              ;; (println a " " b " " (** a b))
              (set! n (+ n 1)))))))


;;(p29 2 100 2 100)


;; end of file
