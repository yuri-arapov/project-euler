;; 22 March 2009
;; 
;; Yuri Arapov <yuridichesky@gmail.com>
;; 
;; Project Euler
;; 
;; http://projecteuler.net/index.php?section=problems&id=44
;;
;; Problem 44
;; 23 May 2003
;;
;; Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten
;; pentagonal numbers are:
;;
;; 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
;;
;; It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
;; 70 − 22 = 48, is not pentagonal.
;;
;; Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
;; difference is pentagonal and D = |Pk − Pj| is minimised; what is the value
;; of D?
;;
;; Answer: ???


(define pentagonals (make-array #f 1000000))


(define (compute-pentagonal n)
  (/ (* n (- (* 3 n) 1)) 2))


(define (pentagonal n)
  (cond ((array-in-bounds? pentagonals n)
         (if (not (array-ref pentagonals n))
           (array-set! pentagonals (compute-pentagonal n) n))
         (array-ref pentagonals n))
        (else
          (compute-pentagonal n))))


(define (pentagonal? p)
  (let ((n (/ (+ 1 (expt (+ 1 (* 24 p)) 0.5)) 6)))
    (if (integer? n)
      (inexact->exact n)
      #f)))


(define (binary-search from to func compare)
  (if (> from to)
    #f
    (let* ((i (quotient (+ from to) 2))
           (f (func i))
           (c (compare f)))
;;;      (format #t "from(~a) to(~a) i(~a) f(~a) c(~a)~%" from to i f c)
      (cond ((negative? c)
             (binary-search (if (> i from) i (+ from 1)) 
                            to 
                            func 
                            compare))
            ((positive? c)
             (binary-search from
                            (if (< i to) i (- to 1))
                            func
                            compare))
            (else
              i)))))


(define (determine-kj n)
  (let ((Pn (pentagonal n)))
    (define (iter k)
      (let ((Pk (pentagonal k)))
        (if (> (- Pk (pentagonal (- k 1))) Pn)
          '()
          (let ((j (binary-search 1
                                  k
                                  pentagonal
                                  (lambda (Pj)
                                    (cond ((< Pn (- Pk Pj))
                                           -1)
                                          ((> Pn (- Pk Pj))
                                           1)
                                          (else
                                            0))))))
            (if j
              (list k j)
              (iter (+ k 1)))))))
    (iter (+ n 1))))


(define (p44)

  (define (iter-n n)
    (let ((Pn (pentagonal n)))

      (define (iter-k k)
        (let ((Pk (pentagonal k)))
          (if (> (- Pk (pentagonal (- k 1))) Pn)
            #f
            (let ((j (binary-search 1
                                    k
                                    pentagonal
                                    (lambda (Pj)
                                      (let ((Pk-Pj (- Pk Pj)))
                                        (cond ((< Pn Pk-Pj)
                                               -1)
                                               ((> Pn Pk-Pj)
                                                1)
                                               (else
                                                 0)))))))
              (if j
                (let ((Pj (pentagonal j)))
                  (format #t "P(~a)=P(~a)-P(~a): ~a=~a-~a~%" n k j Pn Pk Pj)
                  (if (pentagonal? (+ Pj Pk))
                    #t
                    (iter-k (+ k 1))))
                (iter-k (+ k 1)))))))

      (if (iter-k (+ n 1))
        #t
        (iter-n (+ n 1)))))

  (iter-n 3))


(define (p44--)

  (define (iter n)
    (let ((kj (determine-kj n)))
      (if (not (null? kj))
        (let* ((k (car kj))
               (j (cadr kj))
               (Pn (pentagonal n))
               (Pk (pentagonal k))
               (Pj (pentagonal j)))
          (format #t "P(~a)=P(~a)-P(~a): ~a=~a-~a~%" n k j Pn Pk Pj)
          (if (pentagonal? (+ Pk Pj))
            (begin
              (format #t "bingo: ~a~%" Pn)))))
      (if (> n 1000)
        #f
        (iter (+ n 1)))))

  (iter 3))


;; end of file
