;; 23 March 2008
;; 
;; Yuri Arapov <yuridichesky@gmail.com>
;; 
;; Project Euler
;; 
;; http://projecteuler.net/index.php?section=problems&id=44
;;
;; Problem 44
;; 23 May 2003
;;
;; Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten
;; pentagonal numbers are:
;;
;; 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
;;
;; It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
;; 70 − 22 = 48, is not pentagonal.
;;
;; Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
;; difference is pentagonal and D = |Pk − Pj| is minimised; what is the value
;; of D?
;;
;; Answer: 5482660
;;
;; FIXME: Bruteforce with some memorization.  Quite slow.


(load "range.scm")


(define (pentagonal n)
  (/ (* n (- (* 3 n) 1)) 2))


;; (define (pentagonal? p)
;;   (let ((n (/ (+ 1 (expt (+ 1 (* 24 p)) 0.5)) 6)))
;;     (if (integer? n)
;;       (inexact->exact n)
;;       #f)))


(define (p44 max-n)
   
  (define max-pent (pentagonal max-n))

  (let ((pents      (map pentagonal (range 1 max-n)))
        (pents-bits (make-bitvector (+ 1 max-pent) #f)))

    (define (pentagonal? n) (and (<= n max-pent) (bitvector-ref pents-bits n)))

    (define (iter p1 p2)
      (cond ((null? p1)
             #t)
            ((null? p2)
             (iter (cdr p1) (cdr p1)))
            (else
              (let* ((pp1    (car p1))
                     (pp2    (car p2))
                     (p2-p1  (- pp2 pp1))
                     (p2-p1? (pentagonal? p2-p1))
                     (p2+p1  (+ pp2 pp1))
                     (p2+p1? (pentagonal? p2+p1)))
                (cond ((and p2-p1? p2+p1?)
                       (format #t "* ~a - ~a = ~a\n" pp2 pp1 p2-p1)
                       (format #t "* ~a + ~a = ~a\n" pp2 pp1 p2+p1)
                       (list pp2 pp1))
                      (else
                        (if p2-p1?
                          (format #t " ~a - ~a = ~a\n" pp2 pp1 p2-p1))
                        (if p2+p1?
                          (format #t " ~a + ~a = ~a\n" pp2 pp1 p2+p1))
                        (iter p1 (cdr p2))))))))

    (for-each (lambda (n) (bitvector-set! pents-bits n #t)) pents)
    (iter pents pents)))


;; end of file
