#!/usr/bin/python
# 
# Project Euler
#
# http://projecteuler.net/index.php?section=problems&id=12
#
# Problem 12
# 08 March 2002
#
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
# ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#       1: 1
#       3: 1,3
#       6: 1,2,3,6
#      10: 1,2,5,10
#      15: 1,3,5,15
#      21: 1,3,7,21
#      28: 1,2,4,7,14,28
#
# We can see that the 7th triangle number, 28, is the first triangle number to
# have over five divisors.
#
# Which is the first triangle number to have over five-hundred divisors?
#
# Answer:
#      76576500
#


def number_of_divisors(x):
# see:
#   http://primes.utm.edu/glossary/page.php?sort=Tau
        N = 1
        p = 2 # first prime
        while x != 1:
                if (x % p == 0):
                        np = 0
                        while x % p == 0:
                                x /= p
                                np += 1
                        N *= np+1
                p += 1
        return N
# end of number_of_primes


# main

i, x = 1, 1

while 1:
        nd = number_of_divisors(x)

        if nd > 500:
                print x, nd
                break

        if x % 10000 == 0:
                print x

        i += 1
        x += i

# end of file

